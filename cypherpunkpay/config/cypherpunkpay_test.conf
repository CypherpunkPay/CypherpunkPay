[server]

[db]

db_file_path = /tmp/cypherpunkpay_test.sqlite3


[wallets]

btc_network = testnet
btc_testnet_account_xpub = vpub5UtSQhMcYBgGe3UxC5suwHbayv9Xw2raS9U4kyv5pTrikTNGLbxhBdogWm8TffqLHZhEYo7uBcouPiFQ8BNMP6JFyJmqjDxxUyToB1RcToF

xmr_network = stagenet
xmr_stagenet_main_address = 5BKTP2n9Tto6fJ25fv5seHUwuyiSFk2kZJV5LKnQkXp4DknK1e28tPGiEWqbLMJ4wWamGACRW7aTZEXiqEsbgJGfK2QffLz
xmr_stagenet_secret_view_key = 1543738e3ff094c144ed6697a26beb313c765ffd368b781bd4602a4c6153c305
xmr_stagenet_wallet_created = 2020


[admin]

admin_panel_enabled = true


[merchant]

# Should merchant module be enabled? Set to true to receive callbacks.
merchant_enabled = true

# A callback to merchant to notify the payment is completed and order can be shipped.
# You MUST validate order values in this handler to make sure user did not tampered with the submitted checkout form.
payment_completed_notification_url = http://127.0.0.1:6543/cypherpunkpay/dummystore/cypherpunkpay_payment_completed

# A callback to merchant to notify the payment failed.
# You MUST validate order values in this handler to make sure user did not tampered with the submitted checkout form.
payment_failed_notification_url = http://127.0.0.1:6543/cypherpunkpay/dummystore/cypherpunkpay_payment_failed

# A link back to merchant order status page.
# User will be redirected here from CypherpunkPay in all scenarios (payment cancellation, payment completion, charge expiry, etc).
back_to_merchant_url = http://127.0.0.1:6543/cypherpunkpay/dummystore/order/{merchant_order_id}

# CypherpunkPay will authenticate to merchant with this token in an HTTP header:
# Authorization: Bearer <cypherpunkpay_to_merchant_auth_token>
# You MUST verify this in your notification callback handler.
cypherpunkpay_to_merchant_auth_token = nsrzukv53xjhmw4w5ituyk5cre

# If you want to call CypherpunkPay API from your merchant solution, you must authenticate with an HTTP header:
# Authorization: Bearer <merchant_to_cypherpunkpay_auth_token>
merchant_to_cypherpunkpay_auth_token = 4xy2dryumdnfng53tmym2dvfxm


[lightning-network]

btc_lightning_enabled = true

# LND specific. The protocol://host:port for the LND node. Note:
#   * we change LND's default 8080 port because it is already taken by CypherpunkPay in production
#   * LND enforces TLS even on the localhost by default, hence https
btc_lightning_lnd_url = https://127.0.0.1:8081/

# LND specific. CypherpunkPay will authenticate to LND with this token in an HTTP header:
# Grpc-Metadata-macaroon: <btc_lightning_lnd_invoice_macaroon>
# You can get the value by dumping relevant LND *.macaroon file into hex:
# import codecs; codecs.encode(open('/home/lnd/.lnd/data/chain/bitcoin/testnet/invoice.macaroon', 'rb').read(), 'hex')
btc_lightning_lnd_invoice_macaroon = 0201036c6e640258030a100749d833cb20ba2b00af5ac46dcf70331201301a160a0761646472657373120472656164120577726974651a170a08696e766f69636573120472656164120577726974651a0f0a076f6e636861696e120472656164000006200d848586e393814cd8237db32d9e7192854dc05eba578b065a78dba6021af448

# C-lightning specific. The filesystem path to the RPC socket created by lightningd daemon.
# The cypherpunkpay  user must have read and write permissions to this socket.
# Also, make sure the cypherpunkpay user can access the filesystem *path* where the socket file resides.
#btc_lightning_lightningd_socket_path = /run/lightningd-testnet/lightning-rpc


[dummystore]

# This is only used for development and testing. It enables a dummy store to work against.
dummystore_enabled = true
